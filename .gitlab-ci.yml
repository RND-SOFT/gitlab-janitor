before_script:
    - mkdir -p ~/.docker
    - echo ${DOCKER_AUTH_CONFIG} > ~/.docker/config.json

stages:
  - build
  - tagging
  - deploy

variables:
  BUILDVERSION: ${CI_PIPELINE_ID}
  SERVICE_IMAGE: harbor.rnds.pro/rnds/gitlab-janitor
  SERVICE_TAG: ${CI_COMMIT_SHORT_SHA}
  CURRENT_TAG: ${CI_COMMIT_SHORT_SHA}

# MIXINS

.runner:
  image: harbor.rnds.pro/dockerhub/rnds/gitlab-runner:latest

include:
  - project: 'aggredator/support/composer'
    file: '/templates/tagging.yml'
  - project: 'aggredator/support/composer'
    file: '/templates/publish-readme-to-harbor.yml'

build:gem:
  extends: .runner
  stage: build
  variables:
    BUILDVERSION: ${CI_PIPELINE_ID}
  script:
    - bundle config set --local path 'vendor/bundle'
    - bundle install --jobs=3 && bundle package --all
    - gem build `ls | grep gemspec` && gem install `ls | grep -e '.gem$'` 
  cache:
    paths:
      - vendor/bundle
      - vendor/cache
  artifacts:
    name: "gem"
    paths:
      - ./*.gem
  only:
    - master

build:docker:
  extends: .runner
  stage: build
  script:
    - export OC_IMAGE_CREATED=$(date --rfc-3339=seconds)
    - export OC_IMAGE_VERSION=$(cat lib/gitlab_janitor/version.rb | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+')
    - export OC_IMAGE_REVISION=${CI_COMMIT_SHORT_SHA}
    - test -n "${CI_COMMIT_REF_SLUG}" && export OC_IMAGE_REFNAME=${CI_COMMIT_REF_SLUG} 
    - test -n "${CI_COMMIT_TAG}" && export OC_IMAGE_REFNAME=${CI_COMMIT_TAG} 
    - docker-compose pull -q || true
    - SERVICE_TAG=lastest docker-compose pull -q || true
    - docker-compose build --force-rm --pull
    - docker-compose push

# TAGGING STAGE

tagging:tags:
  extends: .tagging_tags
  variables:
    IMAGE: ${SERVICE_IMAGE}

tagging:branches:
  extends: .tagging_branches
  variables:
    IMAGE: ${SERVICE_IMAGE}

tagging:master:
  extends: .tagging_master  
  variables:
    IMAGE: ${SERVICE_IMAGE}

tagging:version:
  extends: .tagging
  variables:
    IMAGE: ${SERVICE_IMAGE}
  before_script:
    - export VERSION=$(cat lib/gitlab_janitor/version.rb | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+')
    - echo "TAG=${VERSION}" > .env.tagging
  only:
    - master   

deploy:dockerhub:
  extends: .runner
  stage: deploy
  script:
    - export VERSION=$(cat lib/gitlab_janitor/version.rb | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+')
    - docker pull ${SERVICE_IMAGE}:latest
    - docker tag ${SERVICE_IMAGE}:latest rnds/gitlab-janitor:latest
    - docker push rnds/gitlab-janitor:latest
    - docker pull ${SERVICE_IMAGE}:${VERSION}
    - docker tag ${SERVICE_IMAGE}:${VERSION} rnds/gitlab-janitor:${VERSION}
    - docker push rnds/gitlab-janitor:${VERSION}
  only:
    - master   
    
deploy:rubygems:
  extends: .runner
  stage: deploy
  script:
    - mkdir -p ~/.gem
    - 'echo ":rubygems_api_key: ${RUBYGEMS_KEY}" > ~/.gem/credentials'
    - chmod 600 ~/.gem/credentials
    - export GEMFILE=`ls *.gem | tail -n 1`
    - gem push $GEMFILE
  only:
    - master
    
deploy:badges:
  extends: .runner
  stage: deploy
  allow_failure: true
  variables:
    BRANCH_LOCK: ci/${CI_PROJECT_NAME}/${CI_COMMIT_REF_SLUG}
    ENV_LOCK: ci/${CI_PROJECT_NAME}/${CI_ENVIRONMENT_SLUG}
    BADGES_URL: https://lysander.rnds.pro/api/v1/badges/janitor
    URL: https://github.com/RND-SOFT/gitlab-janitor
  cache:
    paths:
      - vendor/bundle
      - vendor/cache
    policy: pull
  script:
    - bundle config set --local path 'vendor/bundle'
    - bundle install --jobs=3
    - bundle audit update
    - bundle audit || true
    - bundle outdated --only-explicit --no-pre --group default || true
    - vulnerable=$(bundle audit | grep "Name:" | sort | uniq | wc -l) || true
    - outdated=$(bundle outdated --only-explicit --no-pre --group default | grep "*" | wc -l) || true
    - quality=$(rubycritic -f lint lib | tail -n 1 | cut -d ' ' -f2) || true
    - curl -X PUT -m 3.0 --oauth2-bearer ${BADGE_TOKEN} -H "Content-Type:application/json" -d "{\"badge\":{\"label\":\"vulnerable\", \"color\":\"red\", \"message\":\"${vulnerable} gems\", \"redirect_url\":\"${URL}\"}}" "${BADGES_URL}_vulnerable.json" || true
    - curl -X PUT -m 3.0 --oauth2-bearer ${BADGE_TOKEN} -H "Content-Type:application/json" -d "{\"badge\":{\"label\":\"outdated\", \"color\":\"orange\", \"message\":\"${outdated} gems\", \"redirect_url\":\"${URL}\"}}" "${BADGES_URL}_outdated.json" || true
    - curl -X PUT -m 3.0 --oauth2-bearer ${BADGE_TOKEN} -H "Content-Type:application/json" -d "{\"badge\":{\"label\":\"quality\", \"color\":\"lightgray\", \"message\":\"${quality}%\", \"redirect_url\":\"${URL}\"}}" "${BADGES_URL}_quality.json" || true


  only: 
    - master
    
